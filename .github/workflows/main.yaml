name: USBODE CI Build

permissions:
  contents: write

on:
  push:
    branches: [ "*" ]
    paths-ignore:
      - "README.md"
      - ".github/**"
      - "version.txt"
      - "os-sublist.json"
      - "docs/**"
      - "/update-os-sublist.sh"
  workflow_dispatch:
    branches: [ "main" ]
    inputs:
      release-tag:
        description: 'Release tag to build'
        required: true
        default: 'latest'

jobs:
  build:

    runs-on: [self-hosted]

    steps:
    - name: Clean workspace
      run: |
        git clean -ffdx
        git reset --hard HEAD
        git submodule foreach --recursive git clean -ffdx
        git submodule foreach --recursive git reset --hard HEAD
        git submodule deinit --all --force
    
    - uses: actions/checkout@v4
      with:
        submodules:  recursive
        clean: true
    - name: Build
      run: make release BUILD_NUMBER=${{ github.run_number }}

    - name: Get filename
      id: get-filename
      run: |
        FILENAME_FULL=$(ls usbode*.zip | grep -v -- '-64bit.zip' | xargs basename)
        FILENAME=${FILENAME_FULL%.zip}
        echo "Found file: $FILENAME"
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-filename.outputs.filename }}-images IMG
        path: imgout/${{ steps.get-filename.outputs.filename }}.img.xz
        if-no-files-found: error
        retention-days: 90
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-filename.outputs.filename }}-images-64bit IMG
        path: imgout/${{ steps.get-filename.outputs.filename }}-64bit.img.xz
        if-no-files-found: error
        retention-days: 90
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - name: Clean Images Folder
      run: make clean-imagesfolder

    - uses: actions/upload-artifact@v4
      with:
        # Using the extracted filename as the artifact name
        name: ${{ steps.get-filename.outputs.filename }}
        path: dist/*
        if-no-files-found: error
        retention-days: 90
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - uses: actions/upload-artifact@v4
      with:
        # Using the extracted filename as the artifact name
        name: ${{ steps.get-filename.outputs.filename }}-64bit
        path: dist64/*
        if-no-files-found: error
        retention-days: 90
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - name: Create upgrade packages
      run: |
        # Create upgrade directory
        mkdir -p upgrade
        
        # Create 32-bit upgrade tar and CRC
        cd dist
        tar -cf ../upgrade/upgrade32.tar *
        cd ../upgrade
        crc32 upgrade32.tar > upgrade32.crc
        cd ..

        # Create 64-bit upgrade tar and CRC
        cd dist64
        tar -cf ../upgrade/upgrade64.tar *
        cd ../upgrade
        crc32 upgrade64.tar > upgrade64.crc
                
        # Create final combined tarball
        tar -cf ../sysupgrade.tar *
        cd ..

    - uses: actions/upload-artifact@v4
      with:
        name: sysupgrade
        path: sysupgrade.tar
        if-no-files-found: error
        retention-days: 90
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - name: Create Release (on main only)
      if: github.ref == 'refs/heads/main'
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ github.run_number }}
        name: USBODE build-${{ github.run_number }}
        files: | 
          ${{ steps.get-filename.outputs.filename }}.zip
          ${{ steps.get-filename.outputs.filename }}-64bit.zip
          imgout/${{ steps.get-filename.outputs.filename }}.img.xz
          imgout/${{ steps.get-filename.outputs.filename }}-64bit.img.xz
          sysupgrade.tar
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}