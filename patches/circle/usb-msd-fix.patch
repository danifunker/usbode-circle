From 1dec595f3539c237a275a4f5831be50bd38b1374 Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@gmx.net>
Date: Tue, 26 Aug 2025 14:00:28 +0200
Subject: [PATCH 1/5] usb/gadget/dwusbgadget: Handle more state/event
 combinations

* Ignore USB suspend, if already in suspended (or power-on) state
* Handle USB reset in enum-done and configured state
* Support SetConfiguration(0)

Issue #591
---
 .../circle/usb/gadget/dwusbgadgetendpoint.h   |  9 +++-
 .../circle/usb/gadget/dwusbgadgetendpoint0.h  |  3 +-
 .../circle/usb/gadget/usbcdcgadgetendpoint.h  |  3 +-
 .../circle/usb/gadget/usbmidigadgetendpoint.h |  3 +-
 include/circle/usb/gadget/usbmsdgadget.h      |  3 +-
 .../circle/usb/gadget/usbmsdgadgetendpoint.h  |  4 +-
 lib/usb/gadget/dwusbgadget.cpp                | 51 ++++++++++++++++---
 lib/usb/gadget/dwusbgadgetendpoint.cpp        | 26 +++++++++-
 lib/usb/gadget/dwusbgadgetendpoint0.cpp       |  9 +++-
 lib/usb/gadget/usbcdcgadgetendpoint.cpp       | 10 +++-
 lib/usb/gadget/usbmidigadgetendpoint.cpp      | 10 +++-
 lib/usb/gadget/usbmsdgadget.cpp               | 10 +++-
 lib/usb/gadget/usbmsdgadgetendpoint.cpp       | 15 +++++-
 13 files changed, 138 insertions(+), 18 deletions(-)

diff --git a/include/circle/usb/gadget/dwusbgadgetendpoint.h b/include/circle/usb/gadget/dwusbgadgetendpoint.h
index 896b8c388..cb791fb80 100644
--- a/include/circle/usb/gadget/dwusbgadgetendpoint.h
+++ b/include/circle/usb/gadget/dwusbgadgetendpoint.h
@@ -2,7 +2,7 @@
 // dwusbgadgetendpoint.h
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -51,6 +51,10 @@ class CDWUSBGadgetEndpoint	/// Endpoint of a DW USB gadget
 	/// \note Override this to start first transfer.
 	virtual void OnActivate (void) = 0;
 
+	/// \brief Called to deactivate/stop EP processing.
+	/// \note Override this to stop first transfer.
+	virtual void OnDeactivate (void) = 0;
+
 	/// \brief Called, when the current transfer completes.
 	/// \param bIn Was it an IN transfer?
 	/// \param nLength Number of transferred bytes
@@ -111,6 +115,9 @@ class CDWUSBGadgetEndpoint	/// Endpoint of a DW USB gadget
 	/// \note The buffer must be declared as DMA_BUFFER
 	void BeginTransfer (TTransferMode Mode, void *pBuffer, size_t nLength);
 
+	/// \brief Cancel a began transfer
+	void CancelTransfer (void);
+
 	/// \brief Send STALL response
 	/// \param bIn STALL next IN request, or OUT otherwise?
 	void Stall (boolean bIn);
diff --git a/include/circle/usb/gadget/dwusbgadgetendpoint0.h b/include/circle/usb/gadget/dwusbgadgetendpoint0.h
index 51f8a6e2d..a777355e2 100644
--- a/include/circle/usb/gadget/dwusbgadgetendpoint0.h
+++ b/include/circle/usb/gadget/dwusbgadgetendpoint0.h
@@ -2,7 +2,7 @@
 // dwusbgadgetendpoint0.h
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -32,6 +32,7 @@ class CDWUSBGadgetEndpoint0 : public CDWUSBGadgetEndpoint	/// Endpoint 0 of a DW
 	~CDWUSBGadgetEndpoint0 (void);
 
 	void OnActivate (void) override;
+	void OnDeactivate (void) override;
 
 	void OnControlMessage (void) override;
 
diff --git a/include/circle/usb/gadget/usbcdcgadgetendpoint.h b/include/circle/usb/gadget/usbcdcgadgetendpoint.h
index 57dcb7d58..9f3f3805b 100644
--- a/include/circle/usb/gadget/usbcdcgadgetendpoint.h
+++ b/include/circle/usb/gadget/usbcdcgadgetendpoint.h
@@ -4,7 +4,7 @@
 // This file by Sebastien Nicolas <seba1978@gmx.de>
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -41,6 +41,7 @@ class CUSBCDCGadgetEndpoint : public CDWUSBGadgetEndpoint /// Endpoint of the US
 	void AttachInterface (CUSBSerialDevice *pInterface);
 
 	void OnActivate (void) override;
+	void OnDeactivate (void) override;
 
 	void OnTransferComplete (boolean bIn, size_t nLength) override;
 
diff --git a/include/circle/usb/gadget/usbmidigadgetendpoint.h b/include/circle/usb/gadget/usbmidigadgetendpoint.h
index e7609f265..73c467496 100644
--- a/include/circle/usb/gadget/usbmidigadgetendpoint.h
+++ b/include/circle/usb/gadget/usbmidigadgetendpoint.h
@@ -2,7 +2,7 @@
 // usbmidigadgetendpoint.h
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -38,6 +38,7 @@ class CUSBMIDIGadgetEndpoint : public CDWUSBGadgetEndpoint	/// Endpoint of the U
 	void AttachInterface (CUSBMIDIDevice *pInterface);
 
 	void OnActivate (void) override;
+	void OnDeactivate (void) override;
 
 	void OnTransferComplete (boolean bIn, size_t nLength) override;
 
diff --git a/include/circle/usb/gadget/usbmsdgadget.h b/include/circle/usb/gadget/usbmsdgadget.h
index 1ad7f3573..fc1f1d9c3 100644
--- a/include/circle/usb/gadget/usbmsdgadget.h
+++ b/include/circle/usb/gadget/usbmsdgadget.h
@@ -4,7 +4,7 @@
 // USB Mass Storage Gadget by Mike Messinides
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -190,6 +190,7 @@ class CUSBMSDGadget : public CDWUSBGadget	/// USB mass storage device gadget
 	void OnTransferComplete (boolean bIn, size_t nLength);
 
 	void OnActivate(); //called from OUT ep
+	void OnDeactivate();
 
 private:
 	void HandleSCSICommand();
diff --git a/include/circle/usb/gadget/usbmsdgadgetendpoint.h b/include/circle/usb/gadget/usbmsdgadgetendpoint.h
index 0cc2bb9f9..b13642e23 100644
--- a/include/circle/usb/gadget/usbmsdgadgetendpoint.h
+++ b/include/circle/usb/gadget/usbmsdgadgetendpoint.h
@@ -4,7 +4,7 @@
 // USB Mass Storage Gadget by Mike Messinides
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -36,6 +36,7 @@ class CUSBMSDGadgetEndpoint : public CDWUSBGadgetEndpoint /// Endpoint of the US
 	~CUSBMSDGadgetEndpoint (void);
 
 	void OnActivate (void) override;
+	void OnDeactivate (void) override;
 
 	void OnTransferComplete (boolean bIn, size_t nLength) override;
 
@@ -51,6 +52,7 @@ class CUSBMSDGadgetEndpoint : public CDWUSBGadgetEndpoint /// Endpoint of the US
 	};
 
 	void BeginTransfer (TMSDTransferMode Mode, void *pBuffer, size_t nLength);
+	void CancelTransfer (void);
 
 	void StallRequest(boolean bIn);
 
diff --git a/lib/usb/gadget/dwusbgadget.cpp b/lib/usb/gadget/dwusbgadget.cpp
index dc3f93cd8..9b86599cd 100644
--- a/lib/usb/gadget/dwusbgadget.cpp
+++ b/lib/usb/gadget/dwusbgadget.cpp
@@ -506,13 +506,17 @@ void CDWUSBGadget::HandleUSBSuspend (void)
 	LOGDBG ("USB suspend");
 #endif
 
-	m_bPnPEvent[PnPEventSuspend] = TRUE;
-
-	for (unsigned i = 0; i <= NumberOfEPs; i++)
+	if (   m_State != StatePowered
+	    && m_State != StateSuspended)
 	{
-		if (m_pEP[i])
+		m_bPnPEvent[PnPEventSuspend] = TRUE;
+
+		for (unsigned i = 0; i <= NumberOfEPs; i++)
 		{
-			m_pEP[i]->OnSuspend ();
+			if (m_pEP[i])
+			{
+				m_pEP[i]->OnSuspend ();
+			}
 		}
 	}
 
@@ -526,6 +530,21 @@ void CDWUSBGadget::HandleUSBReset (void)
 	LOGDBG ("USB reset");
 #endif
 
+	switch (m_State)
+	{
+	case StateConfigured:
+		SetConfiguration (0);
+		// fall through
+
+	case StateEnumDone:
+		assert (m_pEP[0]);
+		m_pEP[0]->OnDeactivate ();
+		break;
+
+	default:
+		break;
+	}
+
 	// Set NAK for all OUT EPs
 	for (unsigned i = 0; i <= NumberOfOutEPs; i++)
 	{
@@ -676,7 +695,7 @@ void CDWUSBGadget::InterruptHandler (void)
 	u32 nIntStatus = IntStatus.Read () & IntMask.Read ();
 
 #ifdef USB_GADGET_DEBUG
-	LOGDBG ("IRQ (status 0x%08X)", nIntStatus);
+	LOGDBG ("IRQ (status 0x%08X, state %u)", nIntStatus, (unsigned) m_State);
 #endif
 
 	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
@@ -752,6 +771,26 @@ void CDWUSBGadget::SetDeviceAddress (u8 uchAddress)
 
 boolean CDWUSBGadget::SetConfiguration (u8 uchConfiguration)
 {
+	if (uchConfiguration == 0)
+	{
+		if (m_State == StateEnumDone)
+		{
+			return TRUE;
+		}
+
+		m_State = StateEnumDone;
+
+		for (unsigned i = 1; i <= NumberOfEPs; i++)
+		{
+			if (m_pEP[i])
+			{
+				m_pEP[i]->OnDeactivate ();
+			}
+		}
+
+		return TRUE;
+	}
+
 	if (uchConfiguration != 1)
 	{
 		return FALSE;
diff --git a/lib/usb/gadget/dwusbgadgetendpoint.cpp b/lib/usb/gadget/dwusbgadgetendpoint.cpp
index d71abd08b..d31bbec0a 100644
--- a/lib/usb/gadget/dwusbgadgetendpoint.cpp
+++ b/lib/usb/gadget/dwusbgadgetendpoint.cpp
@@ -2,7 +2,7 @@
 // dwusbgadgetendpoint.cpp
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -255,6 +255,30 @@ void CDWUSBGadgetEndpoint::BeginTransfer (TTransferMode Mode, void *pBuffer, siz
 	}
 }
 
+void CDWUSBGadgetEndpoint::CancelTransfer (void)
+{
+	if (m_TransferMode == TransferDataIn)
+	{
+		CDWHCIRegister InEPCtrl (DWHCI_DEV_IN_EP_CTRL (m_nEP), 0);
+		InEPCtrl.Read ();
+		InEPCtrl.And (~DWHCI_DEV_EP_CTRL_EP_ENABLE);
+		InEPCtrl.And (~DWHCI_DEV_EP_CTRL_CLEAR_NAK);
+		InEPCtrl.Or (DWHCI_DEV_EP_CTRL_EP_DISABLE);
+		InEPCtrl.Write ();
+	}
+	else if (m_TransferMode != TransferUnknown)
+	{
+		CDWHCIRegister OutEPCtrl (DWHCI_DEV_OUT_EP_CTRL (m_nEP));
+		OutEPCtrl.Read ();
+		OutEPCtrl.And (~DWHCI_DEV_EP_CTRL_EP_ENABLE);
+		OutEPCtrl.And (~DWHCI_DEV_EP_CTRL_CLEAR_NAK);
+		OutEPCtrl.Or (DWHCI_DEV_EP_CTRL_EP_DISABLE);
+		OutEPCtrl.Write ();
+	}
+
+	InitTransfer ();
+}
+
 size_t CDWUSBGadgetEndpoint::FinishTransfer (void)
 {
 	assert (m_TransferMode < TransferUnknown);
diff --git a/lib/usb/gadget/dwusbgadgetendpoint0.cpp b/lib/usb/gadget/dwusbgadgetendpoint0.cpp
index 3a70f3d32..0cc36d727 100644
--- a/lib/usb/gadget/dwusbgadgetendpoint0.cpp
+++ b/lib/usb/gadget/dwusbgadgetendpoint0.cpp
@@ -2,7 +2,7 @@
 // dwusbgadgetendpoint0.cpp
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -40,6 +40,13 @@ void CDWUSBGadgetEndpoint0::OnActivate (void)
 	BeginTransfer (TransferSetupOut, m_OutBuffer, sizeof (TSetupData));
 }
 
+void CDWUSBGadgetEndpoint0::OnDeactivate (void)
+{
+	m_State = StateDisconnect;
+
+	CancelTransfer ();
+}
+
 void CDWUSBGadgetEndpoint0::OnControlMessage (void)
 {
 	assert (m_pGadget);
diff --git a/lib/usb/gadget/usbcdcgadgetendpoint.cpp b/lib/usb/gadget/usbcdcgadgetendpoint.cpp
index e0b3186a3..813198b62 100644
--- a/lib/usb/gadget/usbcdcgadgetendpoint.cpp
+++ b/lib/usb/gadget/usbcdcgadgetendpoint.cpp
@@ -4,7 +4,7 @@
 // This file by Sebastien Nicolas <seba1978@gmx.de>
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -70,6 +70,14 @@ void CUSBCDCGadgetEndpoint::OnActivate (void)
 	}
 }
 
+void CUSBCDCGadgetEndpoint::OnDeactivate (void)
+{
+	if (GetDirection () == DirectionOut)
+	{
+		CancelTransfer ();
+	}
+}
+
 void CUSBCDCGadgetEndpoint::OnTransferComplete (boolean bIn, size_t nLength)
 {
 	if (!bIn)
diff --git a/lib/usb/gadget/usbmidigadgetendpoint.cpp b/lib/usb/gadget/usbmidigadgetendpoint.cpp
index 040df576e..f3a17711d 100644
--- a/lib/usb/gadget/usbmidigadgetendpoint.cpp
+++ b/lib/usb/gadget/usbmidigadgetendpoint.cpp
@@ -2,7 +2,7 @@
 // usbmidigadgetendpoint.cpp
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -69,6 +69,14 @@ void CUSBMIDIGadgetEndpoint::OnActivate (void)
 	}
 }
 
+void CUSBMIDIGadgetEndpoint::OnDeactivate (void)
+{
+	if (GetDirection () == DirectionOut)
+	{
+		CancelTransfer ();
+	}
+}
+
 void CUSBMIDIGadgetEndpoint::OnTransferComplete (boolean bIn, size_t nLength)
 {
 	if (!bIn)
diff --git a/lib/usb/gadget/usbmsdgadget.cpp b/lib/usb/gadget/usbmsdgadget.cpp
index 6ec806620..5b6367805 100644
--- a/lib/usb/gadget/usbmsdgadget.cpp
+++ b/lib/usb/gadget/usbmsdgadget.cpp
@@ -4,7 +4,7 @@
 // USB Mass Storage Gadget by Mike Messinides
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -371,6 +371,14 @@ void CUSBMSDGadget::OnActivate()
 	m_pEP[EPOut]->BeginTransfer(CUSBMSDGadgetEndpoint::TransferCBWOut,m_OutBuffer,SIZE_CBW);
 }
 
+void CUSBMSDGadget::OnDeactivate()
+{
+	MLOGNOTE("MSD OnDeactivate", "state = %i",m_nState);
+	m_MSDReady=false;
+	m_nState=TMSDState::Init;
+	m_pEP[EPOut]->CancelTransfer();
+}
+
 void CUSBMSDGadget::SendCSW()
 {
 	memcpy(&m_InBuffer,&m_CSW,SIZE_CSW);
diff --git a/lib/usb/gadget/usbmsdgadgetendpoint.cpp b/lib/usb/gadget/usbmsdgadgetendpoint.cpp
index 222d4de9c..78d111b1f 100644
--- a/lib/usb/gadget/usbmsdgadgetendpoint.cpp
+++ b/lib/usb/gadget/usbmsdgadgetendpoint.cpp
@@ -4,7 +4,7 @@
 // USB Mass Storage Gadget by Mike Messinides
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2023-2024  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2023-2025  R. Stange <rsta2@gmx.net>
 //
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -50,6 +50,14 @@ void CUSBMSDGadgetEndpoint::OnActivate (void)
 	}
 }
 
+void CUSBMSDGadgetEndpoint::OnDeactivate (void)
+{
+	if (GetDirection () == DirectionOut)
+	{
+		m_pGadget->OnDeactivate();
+	}
+}
+
 void CUSBMSDGadgetEndpoint::OnTransferComplete (boolean bIn, size_t nLength)
 {
 	MLOGNOTE("MSDEndpoint","Transfer complete nlen= %i",nLength);
@@ -77,6 +85,11 @@ void CUSBMSDGadgetEndpoint::BeginTransfer (TMSDTransferMode Mode, void *pBuffer,
 	}
 }
 
+void CUSBMSDGadgetEndpoint::CancelTransfer (void)
+{
+	CDWUSBGadgetEndpoint::CancelTransfer();
+}
+
 void CUSBMSDGadgetEndpoint::StallRequest(boolean bIn)
 {
 	CDWUSBGadgetEndpoint::Stall(bIn);

From 407c1d42368547f7402bef51569384efabb6a1ce Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@gmx.net>
Date: Wed, 27 Aug 2025 12:40:05 +0200
Subject: [PATCH 2/5] usb/gadget/dwusbgadget: Check for Suspend at last

If multiple USB interrupts conditions are signaled at once, USB Suspend
must be handled at last, because it deletes some objects, which are
necessary to handle the other conditions.

Issue #591
---
 lib/usb/gadget/dwusbgadget.cpp | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/lib/usb/gadget/dwusbgadget.cpp b/lib/usb/gadget/dwusbgadget.cpp
index 9b86599cd..a4e9186c9 100644
--- a/lib/usb/gadget/dwusbgadget.cpp
+++ b/lib/usb/gadget/dwusbgadget.cpp
@@ -698,11 +698,6 @@ void CDWUSBGadget::InterruptHandler (void)
 	LOGDBG ("IRQ (status 0x%08X, state %u)", nIntStatus, (unsigned) m_State);
 #endif
 
-	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
-	{
-		HandleUSBSuspend ();
-	}
-
 	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_RESET_INTR)
 	{
 		HandleUSBReset ();
@@ -723,6 +718,11 @@ void CDWUSBGadget::InterruptHandler (void)
 		HandleInEPInterrupt ();
 	}
 
+	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
+	{
+		HandleUSBSuspend ();
+	}
+
 	assert (!(nIntStatus & DWHCI_CORE_INT_MASK_IN_EP_MISMATCH));
 
 	PeripheralExit ();

From 6d152c975c29eaa972544578e18b39745c76c352 Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@gmx.net>
Date: Sun, 19 Oct 2025 12:20:55 +0200
Subject: [PATCH 3/5] Revert "usb/gadget/dwusbgadget: Check for Suspend at
 last"

This reverts commit 407c1d42368547f7402bef51569384efabb6a1ce.

Did not work.
---
 lib/usb/gadget/dwusbgadget.cpp | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/lib/usb/gadget/dwusbgadget.cpp b/lib/usb/gadget/dwusbgadget.cpp
index a4e9186c9..9b86599cd 100644
--- a/lib/usb/gadget/dwusbgadget.cpp
+++ b/lib/usb/gadget/dwusbgadget.cpp
@@ -698,6 +698,11 @@ void CDWUSBGadget::InterruptHandler (void)
 	LOGDBG ("IRQ (status 0x%08X, state %u)", nIntStatus, (unsigned) m_State);
 #endif
 
+	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
+	{
+		HandleUSBSuspend ();
+	}
+
 	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_RESET_INTR)
 	{
 		HandleUSBReset ();
@@ -718,11 +723,6 @@ void CDWUSBGadget::InterruptHandler (void)
 		HandleInEPInterrupt ();
 	}
 
-	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
-	{
-		HandleUSBSuspend ();
-	}
-
 	assert (!(nIntStatus & DWHCI_CORE_INT_MASK_IN_EP_MISMATCH));
 
 	PeripheralExit ();

From 201b3050c9013de9cd8763c1b2889b5efb8ff9b1 Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@gmx.net>
Date: Sun, 19 Oct 2025 12:51:46 +0200
Subject: [PATCH 4/5] usb/gadget/dwusbgadget: Allow Out EP Interrupts on
 suspend

It seems Out EP Interrupts can occur while in suspend state. Simply
acknowledge and ignore them.

Issue #591
---
 lib/usb/gadget/dwusbgadget.cpp | 19 +++++++++++++++----
 1 file changed, 15 insertions(+), 4 deletions(-)

diff --git a/lib/usb/gadget/dwusbgadget.cpp b/lib/usb/gadget/dwusbgadget.cpp
index 9b86599cd..713b08842 100644
--- a/lib/usb/gadget/dwusbgadget.cpp
+++ b/lib/usb/gadget/dwusbgadget.cpp
@@ -668,7 +668,8 @@ void CDWUSBGadget::HandleOutEPInterrupt (void)
 	LOGDBG ("Out EP interrupt");
 #endif
 
-	assert (   m_State == StateEnumDone
+	assert (   m_State == StateSuspended
+		|| m_State == StateEnumDone
 		|| m_State == StateConfigured);
 
 	CDWHCIRegister AllEPsIntStat (DWHCI_DEV_ALL_EPS_INT_STAT);
@@ -679,9 +680,19 @@ void CDWUSBGadget::HandleOutEPInterrupt (void)
 	{
 		if (nOutEPStat & 1)
 		{
-			assert (nEP <= NumberOfEPs);
-			assert (m_pEP[nEP]);
-			m_pEP[nEP]->HandleOutInterrupt ();
+			if (m_State != StateSuspended)
+			{
+				assert (nEP <= NumberOfEPs);
+				assert (m_pEP[nEP]);
+				m_pEP[nEP]->HandleOutInterrupt ();
+			}
+			else
+			{
+				CDWHCIRegister OutEPIntAck (DWHCI_DEV_OUT_EP_INT (nEP));
+				OutEPIntAck.Set (  DWHCI_DEV_OUT_EP_INT_SETUP_DONE
+						 | DWHCI_DEV_OUT_EP_INT_XFER_COMPLETE);
+				OutEPIntAck.Write ();
+			}
 		}
 	}
 }

From 62cab386c69f4c3e3ba70246757722ba830e63fc Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@gmx.net>
Date: Sun, 19 Oct 2025 13:04:16 +0200
Subject: [PATCH 5/5] usb/gadget/dwusbgadget: Disable all interrupts on suspend
 early

Issue #591
---
 lib/usb/gadget/dwusbgadget.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/lib/usb/gadget/dwusbgadget.cpp b/lib/usb/gadget/dwusbgadget.cpp
index 713b08842..0efdda78a 100644
--- a/lib/usb/gadget/dwusbgadget.cpp
+++ b/lib/usb/gadget/dwusbgadget.cpp
@@ -518,6 +518,12 @@ void CDWUSBGadget::HandleUSBSuspend (void)
 				m_pEP[i]->OnSuspend ();
 			}
 		}
+
+		// Disable all interrupts
+		CDWHCIRegister AHBConfig (DWHCI_CORE_AHB_CFG);
+		AHBConfig.Read ();
+		AHBConfig.And (~DWHCI_CORE_AHB_CFG_GLOBALINT_MASK);
+		AHBConfig.Write ();
 	}
 
 	CDWHCIRegister IntStatus (DWHCI_CORE_INT_STAT, DWHCI_CORE_INT_MASK_USB_SUSPEND);
@@ -712,6 +718,8 @@ void CDWUSBGadget::InterruptHandler (void)
 	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_SUSPEND)
 	{
 		HandleUSBSuspend ();
+
+		nIntStatus = 0;
 	}
 
 	if (nIntStatus & DWHCI_CORE_INT_MASK_USB_RESET_INTR)

